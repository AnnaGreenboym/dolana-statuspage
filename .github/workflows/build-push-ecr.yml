name: Deploy Status-Page to AWS ECR

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - opt/**        # Example: a folder you want to watch
      - .github/**    # Optional: if you want to react to workflow changes

permissions:
  contents: write

jobs:
  check_and_push:
    runs-on: ubuntu-latest
    env:
      ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}


    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Change based on your project needs

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          python -m pip install --upgrade pip

      # Step 4: build status-page image
      #- name: Build status-page image
      #  run:
      #    docker build -t status-page .

      # Step 5: up containers
      - name: Start Containers with Docker Compose
        run: |
          docker-compose up --build -d

      # Step 6: Snyk-security check
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
          
      # Step 7: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      # Step 8: Authenticate with AWS ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      # Step 9: build and push image to ECR
      - name: Build Docker images
        run: |
          docker tag status-page:latest $ECR_URL:$IMAGE_TAG
          docker push $ECR_URL:$IMAGE_TAG

      - name: Update Kubernetes Manifest with new image tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
        
          sed -i "s|image: <IMAGE_FROM_ECR>|image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|g" k8s_resources/statuspage/statuspage-deployment.yml
          
          git add k8s_resources/statuspage/statuspage-deployment.yml
          git commit -m "Update image tag to ${IMAGE_TAG}" || echo "No changes to commit"
          git push

